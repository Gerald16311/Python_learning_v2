# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе
# должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и округление до целого числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order()
# вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order()
# вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
class cell:
    def __init__(self,count):
        self.count = count

    def __str__(self):
        return str(self.count)

    def __add__(self, other):
        return cell(self.count + other.count)

    def __sub__(self, other):
        if self.count > other.count:
            return cell(self.count - other.count)
        else:
            return "отрицательный результат"

    def __mul__(self, other):
        return cell(self.count * other.count)

    def __floordiv__(self, other):
        return cell(self.count // other.count)

    def __truediv__(self, other):
        return cell(self.count // other.count)

    def make_order(self,in_line_count):
        result = ""
        while self.count !=0:
            if self.count > in_line_count:
                result += '*' * in_line_count + "\n"
                self.count -= in_line_count
            else:
                result += '*' * self.count
                self.count = 0
        return result


a = cell(10)
b = cell(60)

print(f'результат сложения {a + b}')
print(f'результат вычитания {a - b}')
print(f'результат умножения {a * b}')
print(f'результат деления {a / b}')
print(f' результат функции make_order \n{a.make_order(8)}')
print(f' результат функции make_order \n{b.make_order(15)}')
